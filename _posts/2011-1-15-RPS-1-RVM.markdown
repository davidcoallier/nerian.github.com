---
layout: post
title: 'RVM'
---      
 
**Introduction**

I love Ruby. It is expressive. It is powerful. But above all, it has the coolest ecosystem I have ever seen. The ecosystem for a programming language is the stack of tools, practices and conventions that programmers of a particular programming language share in common. A culture that defines its members as Rubyist.  

The Rubyist's mind thinks like this:  

* KISS – Keep it simple. 
* DRY – Don't repeat yourself
* Test Driven Development – Rubyist don't write tests that checks the validity of code. They write code that passes the agreed Test. 
* Agile – Rubyist embrace change. They design their applications to embrace change. 
* Documentation is important, but it is not the final product. Documentation is useful, concise, to the point, with code examples. No 900 pages manual.                                                                       

Nobody said that your ruby code won't execute unless it follows the rules I said. This is just what I have seen so far, what seems to be the usual practice, the way I perceive the Ruby culture. 

I didn't say anything about the language. I am just talking about the Ruby culture. I just saying that their culture, their community, it just rocks and that's why I decide to use Ruby as my main programming language.

This is the first issue of a series of articles concerning Ruby and its ecosystem. Let start by setting up Ruby itself.

**RVM**

RVM is the **R**uby **V**ersion **M**anager. Do you remember what I said about Rubyist's ability to embrace change? This is the main tool. Ruby programmers usually have many versions of ruby install. Mainly 1.9 and 1.8. This is how you install it:
 
First, you need to get Git using any of these methods:

	# Any Platform:

	From the website: http://git-scm.com/

	# Mac OS:

	$ brew install git  # Homebrew

	or

	$ port install git # Macports

	# Linux

	$ apt-get install git-core 
{:lang="text"}

Then install RVM:     

	# Just copy/paste this and hit enter.
	$ bash < <(curl -s https://rvm.beginrescueend.com/install/rvm)
{:lang="text"}

Add this snippet to the end of your .bash_profile or .zshrc
              

	# This loads RVM into a shell session.
	[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"      
{:lang="ruby"}


Now we are going to install Ruby 1.9 without using sudo. We never use sudo.


	$ rvm install 1.9.2
{:lang="text"}

If you run into: 
      

	ld: in /usr/local/lib/libxml2.2.dylib, file was built for i386 
	which is not the architecture being linked (x86_64)
	collect2: ld returned 1 exit status
	make[1]: *** [../../.ext/x86_64-darwin10.6.0/tcltklib.bundle] Error 1
	make: *** [mkmain.sh] Error 1
{:lang="text"}

You need to install libxml2


	brew install libxml2
{:lang="text"}

Now, Rubyist use Gems. Gems are small pieces of functionality, like bricks, that helps you to build your big & cool application. 

Normally, in order to install a gem, like rspec, you do:


	$ gem install rspec
{:lang="text"}

But when you do this you are installing that specific version of the RSpec gem to all users. This way, we can only have one version of that gem. But what happens if you are working in 8 projects and each one of them needs an specific version of rspec, or it will not work?

Enter RVM's Gemsets.    

A Gemset is a set of gems, identified by a name which is completely independent of any other gemset or global gems. So we have the project Fenix and the project Hidra and we want to have a gemset for each of them. 

 
	# Create folder
	$ mkdir hidra  
	$ cd hidra                   
	# Automatically use and/or create the gemset Hidra
	# when entering this folder (and subfolders). 
	# We save that conf to a .rvmrc file. 
	# This file is automatically read by RVM.
	$ "rvm --create use  '1.9.2@Hidra'" > .rvmrc 

	# reenter the folder.

	$ cd ..
	$ cd hidra

	# Now, let install many gems ^_^!
	# This will install gems under the current gemset 
	# that you are using, that's is the Hidra gemset. 
	$ gem install jekyll
	Building native extensions.  This could take a while...
	Successfully installed liquid-2.2.2
	Successfully installed fast-stemmer-1.0.0
	Successfully installed classifier-1.3.3
	Successfully installed directory_watcher-1.3.2
	Successfully installed syntax-1.0.0
	Successfully installed maruku-0.6.0
	Successfully installed jekyll-0.10.0
	7 gems installed  
       
	# Now lets create the project Fenix.
	$ cd ..
	$ mkdir fenix
	$ "rvm --create use  '1.9.2@Fenix'" > .rvmrc
	$ gem install rails
	...large output ... 

	# Now let check that we have truly have separate sets of gems. 

	$ gem list

	...will show the list of gems for the fenix gemset ...
	$ cd .. && cd hidra
	$ gem list
	...will show the list of gems for the hidra gemset ...    

	They are different! ^_^   
{:lang="text"}      
                                                          

More tricks:

I don't need the documentation that is installed for every gem. So:
                                    
       
	# ~/.gemrc or /etc/gemrc: 
	install: --no-rdoc --no-ri
	update: --no-rdoc --no-ri
{:lang="text"}
                   
Another one:
Instead of 


	# .rvmrc
	rvm --create use  '1.9.2@Fenix'
{:lang="text"}

you can write this so that it creates the gemset in whatever is the default ruby version.                           

 
	# .rvmrc
	# Either create a gemset mongoid-site or use the existing one
	rvm gemset create "Fenix"
	rvm gemset use "Fenix"
{:lang="ruby"}